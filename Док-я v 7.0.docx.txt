Описание: лого 

МИНИСТЕРСТВО НАУКИ И ВЫСШЕГО ОБРАЗОВАНИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ
Федеральное государственное автономное образовательное учреждение
высшего образования
«Дальневосточный федеральный университет»
(ДВФУ)
	ИНСТИТУТ МАТЕМАТИКИ И КОМПЬЮТЕРНЫХ ТЕХНОЛОГИЙ
(ШКОЛА)




Департамент программной инженерии
и искусственного интеллекта




Василец Роман Вадимович
Голомидов Никита Сергеевич
Исихара Никита
Кидяев Антон Антонович
Куровский Евгений Евгеньевич


ДОКУМЕНТАЦИЯ ПО ПРОЕКТУ
«Авто-форматирование документов»


Практика по дисциплине:
«Основы проектной деятельности»
Б9124-09.03.04 (10)






Преподаватели:
Логачев Е.М., ассистент департамента
Иваненко Ю.С., старший преподаватель департамента
Васильев О.И., ассистент департамента








г. Владивосток
2025


Содержание/оглавление
________________


Аннотация


В рамках аннотации для документации обычно указывается наименование типа работы, её название, перечисляются авторы, руководитель, год сдачи/написания, данные по содержанию + ключевые слова. После ключевых слов идёт описание структуры работы (сколько глав и что в каждой из них раскрывается). Далее приведён пример.
Документация по проекту – «Авто-форматирование документов»Название темы ВКР.
Автор(ы) работы – Голомидов Никита Сергеевич, Василец Роман Вадимович, Исихара Никита, Кидяев Антон Антонович, Куровский Евгений Евгеньевич.
Научный руководитель / преподаватель – Логачев Егор Михайлович, ассистент департамента ПИиИИ.
Год защиты/написания – 2025.
Отчёт по дисциплине «Основы проектной деятельности» – 35 с., 1 рис., 5 табл., 0 источник, 0 прил.


КЛЮЧЕВЫЕ СЛОВА.


Описание структуры работы………
________________


Введение


В современном мире информационные технологии играют всё более значимую роль, обеспечивая удобные способы обучения, работы и хранения данных. Одной из важнейших составляющих цифрового пространства являются текстовые документы, которые активно используются в образовании, науке, бизнесе и управлении.
Несмотря на обилие текстовых редакторов, многие пользователи сталкиваются с проблемой удобного и гибкого редактирования форматированного текста. В большинстве редакторов отсутствуют интеллектуальные механизмы, позволяющие автоматически адаптировать стиль и структуру документа в соответствии с требованиями пользователя или среды. Это приводит к дополнительным временным затратам на ручную корректировку форматирования, что особенно критично для специалистов, работающих с документами в различных форматах и редакторах. 
Новизна данной работы заключается в разработке мультиплатформенного авто-редактора, способного автоматически адаптировать форматирование текста при переносе в другие редакторы. Это позволит минимизировать временные затраты пользователей и повысить удобство работы с документами.
Объектом исследования данной работы являются системы редактирования текста, обеспечивающие работу с форматированными документами. Предмет исследования – алгоритмы, отвечающие за корректный перенос форматированного текста между различными платформами.
Практическая значимость проекта заключается в создании инструмента, который упростит взаимодействие с текстовыми редакторами, обеспечит корректный перенос данных и улучшит продуктивность пользователей.
Цель работы – разработка удобного мультиплатформенного авто-редактора документов, позволяющего переносить отформатированный текст без потерь.
Для достижения этой цели необходимо решить следующие задачи:
* Проанализировать существующие решения и выявить их недостатки.
* Разработать алгоритмы, обеспечивающие корректный перенос форматированного текста.
* Реализовать программную модель авто-редактора.
* Провести тестирование системы и оценить её эффективность.
* Подготовить рекомендации по использованию редактора в различных сценариях.
________________
   1. План и график работ 


В таблице 1 приведён план и график работ по проекту «Авто-форматирование документов».


Таблица 1 – План и график работ по проекту
№
	Задача проекта
	Срок (до)
	Ответственны(й/е)
	1
	Разработка плана и графика работ над проектом в команде
	11.03.2025
	Василец Роман, Голомидов Никита 
	2
	Проведение анализа предметной области, обоснование актуальности
	18.03.2025
	Голомидов Никита,
Василец Роман 
	3
	Формализация постановки задач программного средства
	25.04.2025
	Исихара Никита, Василец Роман 
	4
	Специфицирование требований к программному средству
	6.05.2025
	Голомидов Никита, Куровский Евгений, Кидяев Антон
	5
	Разработка технического проекта программного средства
	20.05.2025
	Василец Роман, Исихара Никита
	6
	Разработка прототипа, презентации программного средства
	17.06.2025
	Василец Роман, Исихара Никита
	7
	Проведение оценки соответствия результатов цели (по критериям)
	15.07.2025
	Голомидов Никита, Куровский Евгений, Кидяев Антон 
	8
	Представление успешно завершенного проекта экспертной комиссии
	15.07.2025
	Василец Роман, Голомидов Никита, Исихара Никита, Кидяев Антон, Куровский Евгений 
	

   2. Команда проекта


В таблицах 2 и 3 приведена информация по составу проектной команды и ролям в рамках работы над проектом. 


Таблица 2– Обязанности участников проекта
Участник
	Роли в проекте
	Василец Роман Вадимович 
	Разработчик, анализатор 
	Голомидов Никита Сергеевич 
	Исследователь ресурсов, координатор, ведущий автор документации 
	Исихара Никита 
	Разработчик, исследователь ресурсов 
	Кидяев Антон Антонович
	Исследователь ресурсов, автор документации
	Куровский Евгений Евгеньевич
	Исследователь ресурсов, автор документации
	

Таблица 3– Распределение командных ролей (по Белбину)
Роли в проекте (по Белбину)
	Участник/участники
	Координатор (Co-ordinator)
	Голомидов Никита Сергеевич
	Мотиватор (Shaper)
	Кидяев Антон Антонович 
	Генератор идей (Plant)
	Василец Роман Вадимович, Исихара Никита
	Аналитик (Monitor evaluator)
	Голомидов Никита Сергеевич  
	Реализатор (Implementer)
	Василец Роман Вадимович, Исихара Никита 
	Вдохновитель команды (Team worker)
	Кидяев Антон Антонович  
	Исследователь ресурсов
(Resource investigator)
	Кидяев Антон Антонович, Куровский Евгений Евгеньевич  
	Завершитель (Completer finisher)
	Василец Роман Вадимович  
	





   3. Обзор существующих подходов решения задачи


В наше время существует большое количество текстовых редакторов, которые позволяют работать с различными видами файлов, но они не имеют возможности подготовить паттерны форматирования для определенной среды, что заставляет затрачивать большое количество времени на ручную корректировку параметров. В этом вопросе может помочь искусственный интеллект (ИИ), способный работать с документами, но не все языковые модели могут выполнять данную задачу, а также использование ИИ не гарантирует наличие подходящей версии файла на выходе.


   1. Глоссарий терминов


ИИ – искусственный интеллект 
ПС – программное средство  
Паттерн форматирования – заранее заданный шаблон оформления документа, включающих параметры шрифт, отступов, заголовков и других элементов.
Шаблон оформления – Набор параметров и правил, применяемых к документу для достижения нужного внешнего вида.
Мультиплатформенность – способность программного средства работать на различных операционных системах и устройствах. 
Валидация – Проверка документа на соответствие заданным форматным требованиям.
Форматтер – Модуль системы, отвечающий за автоматическое применение правил форматирования к тексту.
Telegram-бот – Автоматизированный интерфейс взаимодействия с пользователем через мессенджер Telegram.
Конвертация форматов - Преобразование одного типа файла (например, DOCX) в другой (например, PDF).
Импорт/экспорт файла – Операции загрузки документа в систему и сохранения его после обработки.
Онтологическая модель – Формальное представление предметной области через её объекты, свойства и отношения.
DFD (Диаграмма потоков данных) – Графическая модель передачи и обработки информации между компонентами системы.
Техническое задание – Документ, содержащий полное описание функциональных требований и ограничений проекта.
Визуальный редактор шаблонов — это графический интерфейс, позволяющий пользователю создавать, настраивать и редактировать шаблоны форматирования документов без необходимости писать код или использовать технические обозначения. Такой редактор отображает параметры (шрифты, отступы, заголовки, таблицы и др.) в наглядной форме и позволяет гибко управлять ими с помощью кнопок, меню и форм.
DDoS-атака (Distributed Denial of Service) — это вид кибератаки, при которой большое количество устройств (ботов) одновременно отправляют множество запросов к целевому серверу, системе или сети с целью перегрузить их и сделать недоступными для обычных пользователей. Атака осуществляется из распределённой сети заражённых компьютеров (ботнетов) и может вызывать остановку сервисов, замедление работы сайта или полную потерю работоспособности системы.
UI (User Interface, пользовательский интерфейс) — это совокупность визуальных и интерактивных элементов, с помощью которых пользователь взаимодействует с программным обеспечением или системой. В UI входят кнопки, меню, поля ввода, окна, шрифты, цвета, и другие компоненты, обеспечивающие удобный и понятный доступ к функциям программы.


   2. Обзор существующих ПО и алгоритмов


Найденные нами программные средства имеют функционал различных сфер, существуют как привычные текстовые редакторы, так и ИИ, способный как вносить, так и рекомендовать пользователю определенные правки.


   1. Microsoft Word


Описание: текстовый процессор, предназначенный для создания, просмотра, редактирования и форматирования текстов статей, деловых бумаг, а также иных документов, с локальным применением простейших форм таблично-матричных алгоритмов. [https://ru.ruwiki.ru/wiki/Microsoft_Word] 
Достоинства: возможность ручного редактирования текста, импорт имеющегося файла для дальнейшей работы с ним, возможность экспорта готового файла в удобном расширении. 
Недостатки: отсутствие возможности редактирования текста по сформированному запросу, отсутствие возможности создания паттернов форматирования файла, коммерческая форма распространения.


   2. Google Docs


Описание: бесплатный облачный сервис от компании Google, который позволяет работать с документами, таблицами, презентациями и т.д. Такой функционал делает его прямым конкурентом MS Office. [https://workspace.ru/blog/rukovodstvo-po-google-docs] 
Достоинства: возможность ручного редактирования текста, импорт имеющегося файла для дальнейшей работы с ним, возможность экспорта готового файла в удобном расширении. Возможность импорта PDF-файлов, бесплатная форма распространения.
Недостатки: отсутствие возможности редактирования текста по сформированному запросу, отсутствие возможности создания паттернов форматирования файла.


   3. Chat GPT


Описание: чат-бот с генеративным искусственным интеллектом, разработанный компанией OpenAI и способный работать в диалоговом режиме, поддерживающий запросы на естественных языках. Система способна отвечать на вопросы, генерировать тексты на разных языках, относящиеся к различным предметным областям. [https://ru.wikipedia.org/wiki/ChatGPT] 
Достоинства: возможность редактирования текста по сформированному запросу, импорт имеющегося файла для дальнейшей работы с ним, экспорт готового документа.
Недостатки: отсутствие возможности ручного редактирования текста, отсутствие возможности создания паттернов форматирования файла, невозможность бесплатной работы с файлами.
 
   4. DeepSeek


Описание: нейросеть, разработанная одноименной китайской компанией. Она пишет тексты, анализирует документы, программирует и делает многое другое, не требуя покупать подписку. [https://habr.com/ru/companies/x-com/articles/878218/] 
Достоинства: возможность редактирования текста по сформированному запросу, импорт имеющегося файла для дальнейшей работы с ним, бесплатная форма распространения.
Недостатки: отсутствие возможности ручного редактирования текста, отсутствие возможности создания паттернов форматирования файла, невозможность экспорта готового файла.


   5. Yandex GPT


Описание: нейросеть семейства GPT от компании «Яндекс», которая может создавать и перерабатывать тексты, предлагать новые идеи и учитывать контекст беседы с пользователем. [https://ru.wikipedia.org/wiki/YandexGPT] 
Достоинства: возможность редактирования текста по сформированному запросу, бесплатная форма распространения.
Недостатки: отсутствие возможности ручного редактирования текста, отсутствие возможности создания паттернов форматирования файла, не принимает материал на импорт, невозможность экспорта готового файла.


   3. Сводная/сравнительная таблица


Критерии для сравнения были выбраны следующие: 


   1. Возможность ручного редактирования – чтобы в случае несоответствия требованиям, пользователь мог самолично сделать то, что не могут сделать алгоритмы.
   2. Импорт файла для редактирования – для удобства пользователя программное средство должно принимать на вход уже готовый файл.
   3. Редактирование по сформированному запросу – чтобы исключить лишнюю трату времени. 
   4. Создание паттернов форматирования файлов – дает возможность вручную настроить оформление один раз, чтобы не полагаться на неисправные алгоритмы. 
   5. Экспорт готового файла – чтобы не переносить правки в другой файл после завершения работы.














Таблица 4– Сравнение программных средств
Критерий\ПС
	Microsoft Word
	Google Docs
	Chat GPT
	DeepSeek
	Yandex GPT
	Ручное редактирование
	+
	+
	–
	–
	–
	Импорт файла для редактирования 
	+
	+
	+
	+
	–
	Редактирование по сформированному запросу
	–
	–
	+
	+
	+
	Создание паттернов форматирования файлов
	–
	–
	–
	–
	–
	Экспорт готового файла
	+
	+
	+
	–
	–
	

   4. Выводы по анализу


Исходя из сравнительной таблицы, все программные средства объединяет отсутствие возможности создания паттернов для форматирования файла, из-за чего уходит большое количество времени на оформление документов при работах в организациях с определенными требованиями к внешнему виду работ, так как редактирование по запросу реализовано только в ИИ-системах, но без возможности ручного вмешательства, а в текстовых редакторах нет возможности создания полноценных паттернов.


   4. Анализ предметной области и построение модели


В настоящей главе выделяются основные понятия и информационные объекты предметной области, рассматриваются примеры ситуаций предметной области, строится математическая и онтологическая модели предметной области.


   5. Целевая аудитория


Целевой аудиторией проекта являются:


   * Студенты (люди от 17 до 30 лет)
        Форматирование отчетов, практических заданий, лабораторных, курсовых и дипломных работ.


   * Преподаватели (люди от 20 до 60 лет)
        Форматирование отчетов, документов, оформление заявлений, приказов.


   * Сотрудники учебных заведений, государственных структур и т.п. (люди от 18 до 60 лет)
        Оформление документов.


   6. Задачи целевой аудитории


Главной задачей целевой аудитории данного программного средства является корректное автоматизированное оформление созданных или отредактированных документов в соответствии с шаблонами Дальневосточного Федерального Университета или на основе параметров, введенных пользователем, без необходимости выполнения ручного форматирования. Также подразумевается возможность создания паттернов от пользователя.


   7. Множество задач предметной области


Предметная область проекта: 
   * Файлы: подразделяются на входной и выходной другого или того же типа, что и входной.
   * Метаданные: По заданным шаблонам пользователя настраиваются элементы текста в файле в соответствие с ГОСТ’ом.
   * Тип файла: В зависимости от введенного пользователем файла программа определяет, как парсировать содержание; Пользователь вводит необходимый ему тип файла на выходе и выводятся соответствующий критерию файл.
   * Telegram-бот: Осуществляет обратную связь с пользователем и помогает разобраться со своим функционалом.


Задачи проекта: 
   * Упрощение и ускорение процесса форматирования текста по ГОСТ’у ДВФУ с помощью определенных шаблонов.
   * Перевод файла одного типа в другой без потери настроек текста.
   * Простота и понятность использования. Для пользователя должно всё выполняться в формате черного ящика. Он корректно ввел необходимые данные и получил на выход ожидаемый от программы результат.
   * Коммуникация telegram-бота, так ка пользователь должен понимать для чего нужен этот бот и как с ним работать.


   8. Информационные объекты


1. Документ  
Пусть D — документ, подаваемый на вход сервису. Тогда:  
D = {F, C, M}, где:  
F — файл (формат, размер, имя).  
C — содержимое (текст, таблицы, изображения).  
M — метаданные (автор, дата, шаблон форматирования).  


Ограничения:
F  {DOCX, PDF, TXT}
size(F)  20 МБ
pages(D)  300
length(filename(F))  255 символов
filename(F) не содержит: `\/:*?"<>|`  


2. Категории форматирования (шаблон ДВФУ)  
Форматирование документа D описывается кортежем:  
Format = {Font, Spacing, Margins, Structure} 


2.1. Шрифты (Font)
Font  {Arial, Times New Roman, Courier New}
Size  [10, 12, 14, 16] pt 
Color = RGB(0,0,0)
Style  {normal, bold, italic}  


2.2. Отступы и интервалы (Spacing)
LineSpacing { 1.0, 1.5, 2.0 }
ParagraphIndent = 1.25 cм
ParagraphSpacing  { 0 pt, 6 pt}


2.3. Поля (Margins)
LeftMargin  [15 мм, 25 мм]
RightMargin  [10 мм, 20 мм]
TopMargin, BottomMargin  [15 мм, 25 мм] 


2.4. Структура 
Заголовки: не более 3 уровней.  
Списки:
только маркированные (`•`) или нумерованные (`1.`, `a)`).  
Таблицы:  
rows  40, columns 
Подписи: 
`Таблица 1 — Название`, шрифт 12 pt, курсив.  
Изображения:  
width  height  [32  32, 2048  2048] пикселей.  
Подписи: `Рисунок 1 — Описание`, выравнивание по центру.  


3. Конвертация файлов
Пусть Convert(D, F₁, F₂) — функция конвертации документа D из формата F₁ в F₂.
Ограничения:
F₁, F₂  {DOCX, PDF, TXT}
Конвертация TXT → PDF/DOCX требует явного указания структуры.  
Конвертация PDF → DOCX возможна только для редактируемых PDF.  


Запрещено:
Конвертация в/из форматов: `ODT`, `RTF`, `HTML`, `JPEG`.  
Потеря структуры (заголовков, списков, таблиц) при конвертации.  


4. Ограничения на содержимое  
4.1. Текст  
Длина строки: ≤ 120 символов (рекомендация для удобочитаемости).  
Запрещены:  
Управляющие символы (`\x00`–`\x1F`).  
Эмодзи и декоративные символы (`♠`, `©`, `→`).  
Нестандартные кавычки (`„“`, `‘’`).  


4.2. Таблицы
Объединение ячеек: только по горизонтали/вертикали (не диагонально).  
Заливка ячеек: только белая (`#FFFFFF`).  


4.3. Изображения
Форматы: `JPEG`, `PNG`.  
Цветовое пространство: `RGB` (запрещён `CMYK`)


5. Шаблоны для форматирования (каждый из указанных объектов указывается с двух сторон вокруг выделяемого элемента текста):
Перед указанием символов:
\n - enter
\t – tab


Элементы документа:
\n\n\n - Заголовок 
\n\n - Подзаголовок
### (height*width) (Загрузка изображения после текста, чтобы конфликт не вызывать (наверное))
***  - Сама литература
111 - нумерованный список
\t111 - Элемент поднумерованного списка
000 - Маркированный список
\t000 - Элемент подмаркированного списка
"""  - Цитата
@@@ - ссылка
\\\ - Разрыв страницы
/// - Таблица (rows*columns)  


   9. Задачи обработки, хранения и передачи информации
Обработка информации:  
   *  Конвертация файлов допускается только между разрешёнными форматами: DOCX, PDF и прочее.
   *  Перед конвертацией выполняется анализ исходного форматирования документа на соответствие установленному шаблону.  
   *  Любые попытки конвертации в неразрешённые форматы или применения неописанных параметров блокируются системой.


Хранение данных:  
   * Все шаблоны форматирования и пользовательские настройки могут храниться локально или в облачной базе данных.  
   * Доступ к хранилищу осуществляется только авторизованными пользователями по защищённому протоколу (например, HTTPS или VPN).  
   * Вся информация в базе данных проходит обязательную валидацию перед записью.


Передача данных:  
   * Передача данных между компонентами системы (клиент, сервер, база данных) выполняется по защищённым каналам связи (например, HTTPS, TLS).  
   * Экспорт документов осуществляется только в разрешённые форматы (DOCX, PDF, TXT) с проверкой валидности результата.  
   * При экспорте и передаче файлов ведётся журналирование операций (логирование даты, времени, пользователя и типа операции).  
   * Переданные файлы могут быть переданы пользователю через чат-бота только после успешного прохождения всех этапов проверки.  
   * При необходимости интеграции с внешними сервисами или сетями база данных, обмен осуществляется исключительно через API с авторизацией и контролем доступа.


Описание обмена данными с базой данных и по сети:  
   *  Все операции чтения и записи данных в базу осуществляются через стандартизированные запросы (например, REST API или SQL-запросы), с обязательной проверкой корректности данных на стороне сервера.  
   *  Межсетевой обмен информацией допускается только по защищённым протоколам, с шифрованием передаваемых данных и обязательной аутентификацией.  
 Любые попытки несанкционированного доступа или передачи данных фиксируются и блокируются системой безопасности.


   10. Анализ смысла ситуаций предметной области


4.6 Анализ смысла ситуаций предметной области


Ситуация 1: Форматирование отчёта по стандартам ДВФУ


Описание:
Пользователь загружает документ (допустимые форматы: DOCX, PDF) в систему. Редактор автоматически применяет к содержимому документа предустановленный или пользовательский шаблон без участия пользователя в процессе разметки.


Решение:  
Документ автоматически преобразуется к виду, соответствующему выбранному оформлению (например, ДВФУ). Все параметры форматирования (шрифты, размеры, поля, отступы, интервалы, структура, оформление таблиц и изображений, нумерация страниц и др.) приводятся в строгое соответствие с шаблоном, исключая необходимость ручных правок пользователем.  
Система поддерживает автоматическую конвертацию между форматами DOCX, PDF и прочее. Конвертация возможна только между этими форматами.


Ограничения:
- Шаблон (ДВФУ или любой пользовательский) должен быть предварительно загружен в систему администратором либо самим пользователем.
- Пользователь не должен использовать в исходном документе нестандартные или специализированные символы, скрытые теги, управляющие коды, нестандартные маркеры или собственные макросы для указания составляющих шаблона.
- Допустимы только следующие форматы для загрузки и конвертации: DOCX, PDF, прочее. Использование других форматов (например, ODT, RTF, HTML, JPG и других) запрещено.
- Максимальный размер документа — 20 МБ.
- Количество страниц в документе — не более 300.
- Количество таблиц в одном документе — не более 50, каждая таблица — максимум 40 строк и 12 столбцов.
- Количество изображений в одном документе — не более 50, каждый файл изображения — не менее 32×32 пикселей и не более 2048×2048 пикселей.
- При конвертации между форматами запрещено терять структурную разметку документа (заголовки, списки, таблицы, изображения, подписи, нумерацию страниц и т.п.).
- В формате PDF не допускается наличие редактируемых полей.
- Все параметры форматирования (поля, интервалы, шрифты, размеры, стили, структура, подписи, выравнивания, форматы изображений и таблиц, стиль нумерации и т.д.) должны строго соответствовать выбранному шаблону. Отклонения (например, поля более 25 мм, шрифты вне согласованного перечня, межстрочные интервалы, не указанные в шаблоне и т.д.) запрещены.
- Каждый документ после форматирования автоматически проходит валидацию на соответствие шаблону. При обнаружении несоответствий система возвращает ошибку с указанием конкретного нарушенного параметра.
- Если шаблон отсутствует, или не загружен, или некорректен — операция невозможна, пользователю выводится соответствующее уведомление.
- Конвертация между форматами осуществляется только при условии, что итоговый документ соответствует всем ограничениям шаблона (при невозможности полного соответствия выдаётся ошибка).


   11. Анализ знаний предметной области


Для каждого документа существует непустое множество параметров форматирования.
• Связи между параметрами (например, заголовок 1 уровня всегда имеет определенный шрифт и размер).
• Документ не может быть отформатирован без указания хотя бы одного параметра.
• Файл не может быть отредактирован без внесения специальных символов внутри текста.
• Каждый параметр форматирования влияет на внешний вид или структуру документа.
• Некоторые параметры могут быть взаимозависимы (например, изменение стиля может автоматически изменить межстрочный интервал).
• Для корректного отображения форматирования требуется поддержка соответствующего программного обеспечения.
• Пользователь может изменять параметры форматирования как для всего документа, так и для отдельных его частей.
• При сохранении документа параметры форматирования сохраняются вместе с содержимым.
• Нарушение связей между параметрами может привести к некорректному отображению документа.
• В системе предусмотрены ограничения на допустимые значения параметров форматирования (например, минимальный и максимальный размер шрифта).
• Для разных типов документов может быть предусмотрен разный набор обязательных параметров форматирования.
• При экспорте или импорте документа параметры форматирования должны быть корректно преобразованы или сохранены.
• Анализ и обработка параметров форматирования необходимы для автоматизации процессов редактирования и валидации документов.


   12. Формальная постановка задач


Дано: 
Input: 
  - `inputMessage` — строка (`String`) или текстовый файл (`File`). 
  - `type` — тип выходного файла (`TypeFile`), где `TypeFile ∈ {DOCX, PDF, TXT}`. 
 
Требуется:
Построить отображение:
 
где: 
   * I  — множество допустимых входных данных: 
   * I = {String}  {File | File соответствует ограничениям из п. 1 формализации} 
   * T — множество допустимых типов выходных файлов: 
   * T = {DOCX, PDF, TXT} 
   * F — множество выходных файлов, удовлетворяющих требованиям форматирования (см. предыдущую формализацию). 
 
Свойства отображения A: 
Для любых  и  результат f = A(i, t)  должен: 
1. Содержать структурированное представление данных из i: 
   * Автоматическое выделение заголовков, списков, таблиц (если они неявно заданы во входных данных). 
   * Добавление обязательных элементов (титульный лист, нумерация страниц, колонтитулы). 
2. Соответствовать формату t:
Если t = DOCX/PDF:
        Шрифт, отступы, поля — по шаблону ДВФУ (см. п. 2 предыдущей формализации). 
        Сохранение структуры при конвертации (запрещено "схлопывание" таблиц или заголовков). 
Если  t = TXT: 
         Текст преобразуется в плоский вид с переносами строк (макс. 120 символов на строку). 
3. Быть валидным:
   * f  удовлетворяет всем ограничениям на: 
   * Имя файла (длина ≤ 255 символов, запрещённые символы). 
   * Размер (  20 МБ ). 
   * Содержимое (отсутствие управляющих символов, эмодзи). 
 
Ограничения и условия работы алгоритма A 
1. Автоматизация:
Все этапы (парсинг входных данных, применение стилей, генерация структуры) выполняются без ручного вмешательства. 
2. Обработка входных данных: 
Если i — файл: проверка его формата и соответствия ограничениям (размер, имя). 
Если i — строка: анализ на неявную структуру (например, маркеры списков `-` или `1.`). 
3. Конвертация: 
 Для t = PDF: 
         Если исходные данные — `TXT`, требуется явное указание структуры (например, через Markdown-подобные аннотации). 
         Запрещены преобразования, приводящие к потере данных (например, `PDF → DOCX` для сканированных PDF). 
4. Валидация результата:
Алгоритм должен проверять выходной файл f на соответствие всем требованиям перед возвратом. 
 
Примеры работы A
Вход:
 i =  "Заголовок\n- Пункт 1\n- Пункт 2",  t = DOCX. 
Выход f:
DOCX-файл с: 
Титульным листом (автосгенерированным). 
Заголовком "Заголовок" (стиль `Heading 1`, Times New Roman 14 pt). 
Маркированным списком (шрифт 12 pt, отступ 1.25 см). 
 
Недопустимый сценарий: 
i = "Таблица: 50⨉100 ячеек", t = DOCX → отклонено нарушение rows  40
 
Требования к реализации алгоритма A
1. Детерминированность: 
Для одинаковых i и t результат f  должен быть идентичным. 
2. Обработка ошибок:
При несоответствии i или t ограничениям — возврат ошибки с указанием нарушения. 
3. Расширяемость:
Возможность добавления новых типов t (например, `HTML`) без переписывания ядра алгоритма. 
 
Формальное описание проверок 
Для f = A(i, t) должны выполняться предикаты: 
f  F: ValidFormat}(f, t)  {ValidContent}(f)  ValidMetadata}(f)
где: 
ValidFormat(f, t) — проверка стилей, структуры и технических параметров для типа \( t \). 
ValidContent(f) — отсутствие запрещённых символов, размеров таблиц/изображений. 
ValidMetadata(f) — корректность имени файла, автора, даты.
   13. Технические противоречия 
Свойство «жёсткая стандартизация оформления» положительно влияет на характеристику «однозначность автоматической проверки», но негативно влияет на характеристику «гибкость представления информации». Противоположное свойство «гибкое оформление» положительно влияет на характеристику «возможность индивидуализации документов», но негативно влияет на характеристику «точность автоматической проверки».  
Рисунок 1 – Первое техническое противоречие


Свойство «поддержка пользовательских шаблонов» положительно влияет на характеристику «универсальность системы», но негативно влияет на характеристику «надёжность специализированных проверок». 
  



Рисунок 2 – Второе техническое противоречие


Противоположное свойство «ограничение числа поддерживаемых форматов» положительно влияет на характеристику «глубина контроля для каждого формата», но негативно влияет на характеристику «масштабируемость решения».  
Рисунок 3 – Третье техническое противоречие


   14. ИКР


Идеальным конечным результатом проекта является аудитория всех студентов, преподавателей и сотрудников ДВФУ, а также иных пользователей, которая благодаря программному средству экономит большое количество времени на оформлении.
Программное средство функционирует максимально просто и удобно: пользователь получает корректно оформленный документ с минимальными усилиями, без необходимости изучать требования вручную или вносить многочисленные правки.
Ошибки оформления полностью исключаются, а взаимодействие с программой занимает минимальное время и не вызывает затруднений для пользователей любого уровня.


   15. Описание решения ТРИЗ-задачи


Согласно ТРИЗ (теории решения изобретательских задач), для преодоления технических противоречий, указанных в разделе 4.9, в разрабатываемом программном средстве будут использованы следующие подходы и решения, позволяющие приблизиться к идеальному конечному результату:


1. Противоречие между жёсткой стандартизацией оформления и гибкостью представления информации.
Для преодоления этого противоречия предусматривается внедрение многоуровневой системы проверки и настройки стандартов:
- В программном средстве будет реализован режим строгой проверки для типовых (стандартных) документов и режим "мягкой" проверки для случаев, когда требуется индивидуализация подход.
- Пользователь сможет выбирать степень автоматизации и строгости проверки: жёсткий режим (для массовых, официальных работ), гибкий режим (для творческих, нестандартных работ) или пользовательский профиль.
- Будет предусмотрена возможность настройки исключений и дополнительных правил, чтобы автоматическая проверка могла корректно обрабатывать не только стандартные, но и частично индивидуализированные документы.
- Для повышения гибкости без потери контроля система будет сопровождать пользователя подсказками и рекомендациями по устранению выявленных отклонений, позволяя принимать осознанные решения в каждом конкретном случае.
Таким образом достигается компромисс между однозначностью автоматической проверки (при необходимости) и возможностью индивидуализации оформления для особых случаев.


2. Противоречие между поддержкой пользовательских шаблонов (универсальностью системы) и глубиной/надёжностью специализированных проверок.
Для разрешения этого противоречия используются следующие приёмы:
- В программном средстве реализована модульная архитектура, позволяющая подключать отдельные модули проверки для различных форматов и шаблонов. Это обеспечивает высокое качество проверки для специализированных шаблонов и одновременно поддерживает возможность расширения системы новыми пользовательскими шаблонами.
- Для пользовательских шаблонов предусматривается "базовый уровень" проверки, охватывающий универсальные требования (например, корректность структуры, основные параметры оформления), а для стандартных шаблонов — расширенный и более строгий контроль.
- Пользователю предоставляется возможность создавать и сохранять собственные шаблоны, однако для каждого нового шаблона разработчик или администратор может дополнительно настраивать индивидуальные правила проверки, повышая надёжность анализа.
В результате обеспечивается баланс между универсальностью системы (расширяемость, удобство для пользователя) и глубиной контроля (надёжность и полнота проверки для важных, официальных шаблонов).
В целом, преодоление технических противоречий достигается за счёт гибкой, настраиваемой архитектуры программного средства, использования многоуровневых проверок, возможности выбора режимов работы и постоянного совершенствования. Это позволяет обеспечить максимальную экономию времени и удобство для всех целевых групп, приближаясь к идеальному конечному результату.


   16. Критерии завершенности проекта


Проект «Авто-форматирование документов» можно считать успешно завершенным при достижении следующих значений критериев качества:
   * Документы форматируются корректно без необходимости внесения дополнительных правок;
   * Время оформления документов сводится к паре секунд или минут;
   * Программное средство получается не менее 100 запросов в первый месяц работы;
   * Реализована поддержка различных форматов файлов (PDF, DOCX и т.д.);
   * Выявляется минимальное количество ошибок (не более 2-х на документ) или не выявляется вовсе;


   17. SWOT-анализ проекта


Проект имеет преимущества в скорости и корректности форматирования, так как обработка документа будет занимать не более пары минут, а оформление создается исключительно по техническому заданию, при этом всем ПС и результаты его работы будут находиться в доступе на любой платформе, поддерживающей Telegram, однако из-за этого приложение не будет работать при утечке данных, DDoS-атаке или отсутствии доступа к клиенту Telegram. Но полностью автоматизировать процесс оформления нельзя, потому что алгоритм не взаимодействует с ИИ для полностью автоматизированного форматирования, из-за чего пользователю необходимо использовать технические символы для обозначения компонентов оформления. Также есть риск, что руководство пользователя будет неправильно прочитано, из-за чего проект не выдаст необходимый результат. К тому же некоторые ИИ-сервисы уже умеют работать с самим файлом, а не только предлагать правки текстом, что допускает большее появление подобных ПС в будущем, поэтому может начаться конкуренция в этой сфере. Набор паттернов может быть расширен в дальнейшем, как и появление машинного обучения для автоматической корректировки ошибок. 


Таблица 5– SWOT-анализ проекта
Сильные стороны (strengths)
	Слабые стороны (weaknesses)
	Скорость форматирования файла; Отсутствие необходимости в ручном редактировании; Универсальность; 
	Необходимость введения специальных символов в документ для работы ПС; Отсутствие ручного режима редактирования; Трудности при некорректной структуре файла; Интеграция с Telegram-ботом;
	Возможности (opportunities)
	Риски (threats)
	Последующее добавление других паттернов форматирования; Добавления визуального редактора шаблонов; Внедрение многоязыковой поддержки; Интеграция с облачными хранилищами; Использование машинного обучения для корректировки ошибок; 
	Неправильное считывание символов, что приводит к неправильному оформлению; Некорректное использование из-за непонимания правил ввода; Конкуренция с ИИ-сервисами; Проблемы с безопасностью при хранении и передаче данных через сторонние сервисы; 
	

   5. Проектирование программной системы
В данной главе описываются реализация ключевых компонентов программного средства, поддерживающего как шаблоны ДВФУ, так и пользовательские паттерны форматирования, а также результаты их тестирования и выявленные ограничения.


   18. СДР


1. Разработка идеи ПС
2. Разработка плана-графика проекта
3. Анализ предметной области
3.1 Анализ актуальности данного проекта
3.2 Выявление проблем автоматического форматирования 
3.3 Определение целевой аудитории и сценариев использования
4. Обзор аналогичных решений
4.1 Сравнительный анализ ИИ-сервисов и текстовых редакторов
4.2 Выделение функциональных недостатков существующих решений
5. Формализация требований к программному средству
5.1 Функциональные и нефункциональные требования
5.2 Ограничения, шаблоны, форматирования и параметры документов
6. Проектирование архитектуры системы
6.1 Выделение основных модулей (валидация, форматирование, логика взаимодействия)
6.2 Определение форматов данных и каналов передачи
6.3 Проектирование системы хранения данных и безопасности 
7. Выбор технологий и среды разработки
8. Разработка прототипа системы
9. Реализация модулей
9.1 Модуль валидации документов
9.2 Модуль авто-форматирования текста
9.3 Модуль импорта и экспорта файлов
9.4 Модуль шаблонов форматирования
9.5 UI модули
9.6 Модуль взаимодействия Telegram-бота с сервером
9.7 Модуль взаимодействия Telegram-бота с пользователем
9.8 Модуль взаимодействия пользователя с сервером  
10. Реализация логирования операций
11. Разработка тестов
11.1 Тестирование по методу чёрного ящика
11.2 Валидация корректности форматирования
12. Оптимизация и исправление ошибок
13. Подготовка документации
13.1 Пользовательская инструкция
13.2 Техническое описание модулей


   19.  Диаграмма Гантта
  

   20. Рисунок 4 – Диаграмма Гантта


   21. Программное средство коллективной разработки


GitHub – это веб-платформа, созданная для хостинга, отслеживания и совместной работы над проектами разработки программного обеспечения. В основе лежит система контроля версий Git, позволяющая разработчикам работать одновременно, отслеживая изменения и обеспечивая возможность возврата к предыдущим версиям GitHub расширяет Git, предоставляя веб-интерфейс и инструменты для совместной работы. 
Главный экран (дашборд) предоставляет обзор активности и проектов. Он включает: ленту активности (коммиты, pull requests, issues), список репозиториев, рекомендации репозиториев, новости GitHub и уведомления.
Рисунок 5 – Главная страница GitHub  


Страница репозитория – центральное место управления проектом. Она включает:
   * Код - структура файлов и директорий, история изменений. 
   * Issues (Задачи) - система отслеживания ошибок и задач. 
   * Pull Requests - механизм для предложения изменений кода и их рецензирования.
   * Actions - автоматизация задач разработки (тестирование, сборка). 
   * Projects - инструмент для организации задач. 
   * Wiki - документация по проекту. 
   * Insights - статистика о проекте. 
Страница Issues позволяет отслеживать и управлять задачами. Она включает: список Issues (открытые и закрытые, с фильтрацией), форму для создания нового Issue (заголовок, описание, назначение, метки), страницу отдельного Issue (подробная информация о задаче). 
 Рисунок 6 – Страница репозитория GitHub  


        Kaiten – это веб-платформа, предназначенная для организации командной работы и управления проектами, основанная на принципах визуального управления и методологий Agile и Kanban. Сервис позволяет командам планировать, координировать и отслеживать рабочие процессы в режиме реального времени. Kaiten предлагает гибкий визуальный интерфейс, который помогает распределять задачи, управлять приоритетами и контролировать загрузку участников команды.
        Главный экран (дашборд) представляет собой централизованное рабочее пространство с обзором всех досок и процессов. Он включает:
   * список досок с фильтрацией по командам и проектам;
   * статус текущих задач и их распределение по колонкам (например: «В работе», «Ожидает проверки», «Готово»);
   * панель уведомлений и комментариев;
   * навигацию по рабочим пространствам, меткам и участникам;
   * блок быстрых действий (создание задачи, доски, фильтрация по тегам).
Рисунок 7 – Главная страница Kaiten  


Доска задач – ключевой инструмент управления проектом в Kaiten. Она представляет собой настраиваемое визуальное представление рабочего процесса в виде колонок и карточек. Доска включает:
   * Карточки задач – содержат название, описание, чек-листы, сроки, метки, приоритет, вложения и комментарии;
   * Колонки процесса – отображают этапы выполнения задач (можно настроить под любой процесс: Kanban, Scrum, Scrumban и др.);
   * Фильтры и сортировка – позволяют настроить отображение задач по исполнителям, срокам, меткам и другим параметрам;
   * Планировщик и таймлайн – для визуализации сроков задач и спринтов;
   * Автоматизация – поддержка сценариев автоматических действий при изменении состояния карточки (например, изменение исполнителя, уведомления);
   * Отчёты и аналитика – диаграммы загрузки, графики выполнения задач, показатели эффективности команды.
Страница задачи (карточка) позволяет управлять всем жизненным циклом задачи. Она включает:
   * заголовок и описание;
   * чек-листы подзадач;
   * назначение участников;
   * приоритет и дедлайн;
   * метки и тип задачи;
   * историю изменений и обсуждение;
   * вложения и ссылки на связанные задачи.  
Рисунок 8 – Доска задач


        Kaiten активно используется командами разработки, маркетинга, аналитики и поддержки для прозрачной координации работы, повышения эффективности и соблюдения сроков. Платформа интегрируется с GitHub, GitLab, Jira, Slack и другими сервисами, обеспечивая централизованное управление проектами.
      22.       23. Спецификация требований


Основные компоненты DFD:
      * Внешние сущности:
      * Пользователь – загружает документ, выбирает шаблон, получает результат.
      * Telegram-бот (опционально) – альтернативный интерфейс для взаимодействия.
      * Процессы:
      * Загрузка документа – прием файла от пользователя.
      * Валидация документа – проверка формата, структуры и параметров.
      * Применение шаблона – автоматическое форматирование согласно выбранному шаблону.
      * Экспорт документа – сохранение в нужном формате (DOCX, PDF).
      * Хранилища данных:
      * База данных шаблонов – содержит предустановленные и пользовательские шаблоны.
      * Журнал операций – логирует действия пользователей и ошибки.
      * Потоки данных:
      * Файл документа (DOCX, PDF, TXT) → Загрузка → Валидация.
      * Запрос шаблона → База данных шаблонов → Применение шаблона.
      * Отформатированный документ → Экспорт → Пользователь.
      * Ошибка валидации → Уведомление пользователю.
      * Детализация процессов:
      * Валидация документа:
      * Проверяет:
      * Формат файла (DOCX, PDF, TXT).
      * Поля, шрифты, отступы, нумерацию.
      * Наличие запрещенных элементов (например, изображения в заголовках).
      * При ошибке возвращает список нарушений.
      * Применение шаблона:
      * Автоматически корректирует:
      * Поля страницы (левое: 20 мм, правое: 15 мм и т.д.).
      * Шрифты (Arial, Times New Roman).
      * Структуру (заголовки, списки, таблицы).
      * Экспорт:
      * Конвертирует документ в выбранный формат с сохранением форматирования.
      * Проверяет соответствие выходного файла требованиям.
      24. Диаграмма вариантов использования


Участники и их роли:
      * Пользователь – инициирует процесс.
      * Интерфейс системы – принимает файл и управляет процессом.
      * Валидатор – проверяет документ.
      * База данных шаблонов – предоставляет шаблоны.
      * Форматтер – применяет форматирование.
      * Модуль экспорта – сохраняет результат.
Сценарий с детализацией:
      * Шаг 1: Загрузка файла
      * Пользователь загружает файл через интерфейс.
      * Интерфейс передает файл валидатору.
      * Шаг 2: Валидация
      * Валидатор проверяет:
      * Соответствие формата (DOCX, PDF, TXT).
      * Наличие обязательных структурных элементов (например, заголовков).
      * Если ошибка:
      * Валидатор возвращает список нарушений интерфейсу.
      * Интерфейс уведомляет пользователя.
      * Если успех:
      * Валидатор запрашивает шаблон из БД.
      * Шаг 3: Получение шаблона
      * БД возвращает шаблон (например, "Шаблон ДВФУ").
      * Шаг 4: Форматирование
      * Валидатор передает файл и шаблон форматтеру.
      * Форматтер:
      * Изменяет шрифты, поля, отступы.
      * Нумерует страницы.
      * Корректирует таблицы и изображения.
      * Шаг 5: Экспорт
      * Форматтер передает результат модулю экспорта.
      * Модуль экспорта сохраняет файл в выбранном формате.
      * Шаг 6: Завершение
      * Интерфейс уведомляет пользователя о готовности файла.


      25. Архитектурно-контекстная диаграмма


Состояния:
      * Загружен – документ принят системой.
      * На проверке – выполняется валидация.
      * Ошибка – выявлены несоответствия.
      * Форматирование – применение шаблона.
      * Экспорт – подготовка к сохранению.
      * Завершен – документ готов.
Переходы и триггеры:
      * Загружен → На проверке
      * Триггер: Автоматически после загрузки.
      * Действие: Запуск валидации.
      * На проверке → Ошибка
      * Триггер: Обнаружены нарушения (например, неверные поля).
      * Действие: Формирование отчета об ошибках.
      * На проверке → Форматирование
      * Триггер: Документ валиден.
      * Действие: Загрузка шаблона из БД.
      * Форматирование → Экспорт
      * Триггер: Успешное применение шаблона.
      * Действие: Конвертация в выбранный формат.
      * Экспорт → Завершен
      * Триггер: Файл сохранен.
      * Действие: Уведомление пользователя.
      * Ошибка → Загружен
      * Триггер: Пользователь повторно загружает исправленный файл.
      * Действие: Повторная валидация.
      * Обработка исключений:
      * Если шаблон не найден в БД:
      * Переход в состояние Ошибка с сообщением: "Шаблон недоступен".
      * Если форматирование не удалось:
      * Откат в состояние “На проверке” для повторной обработки.
  

Рисунок 9 - Уровень взаимодействия с пользователем
  

Рисунок 10 - Уровень взаимодействия подсистем
      26. Диаграмма потоков данных
Диаграмма, которая отражает пути, по которым циркулируют данные внутри системы, а  также между системой и внешним миром. Часть описание заимствуется из пункта 4.8, а именно входные и выходные данные для разных функций (в сокращённой форме). Кроме самих данных на диаграмме отражаются запросы внутри системы и сами функции модулей.


      27. Диаграмма последовательностей состояний
Диаграммы последовательностей моделируют взаимодействия между объектами в едином сценарии использования. Они иллюстрируют, как различные части системы взаимодействуют друг с другом для выполнения функции, а также порядок, в котором происходит взаимодействие при выполнении конкретного случая использования. (Пример проиллюстрирован ниже)
  

Рисунок n – Диаграмма последовательностей состояний


      28. Диаграмма перехода из состояния в состояние
При проектировании сложной системы принято делить ее на части, каждую из которых затем рассматривать отдельно. Таким образом, при объектной декомпозиции система разбивается на объекты или компоненты, которые взаимодействуют друг с другом, обмениваясь сообщениями и данными. 
Сообщения описывают или представляют собой некоторые события. Получение объектом сообщения активизирует его и побуждает выполнять предписанные действия.  Даётся также краткое описание.
Диаграмма состояний и переходов показывает: 
      * пространство состояний данного класса;
      * события, которые влекут переход из одного состояния в другое;
      * действия, которые происходят при изменении состояния.
(Пример ниже)
  

Рисунок n – Диаграмма перехода из состояния в состояние


      29. Разработка интерфейса
Формирование структуры интерфейса с описанием окон и их наполнения.


      30. Диалог с пользователем
Описание действий пользователя по взаимодействию с предполагаемым интерфейсом проекта.


      31. Прототип программного средства
Скриншоты с кратким описанием формочного прототипа / прототипа интерфейсов (возможен перенос работ на 3ий семестр)


      32. План тестирования
Представляется таблица с классами эквивалентности, содержащая описания тестовых ситуаций с их идентификаторами. Для данных ситуаций формируется набор тестов покрывающий все классы эквивалентности. Для разного рода событий формируется набор сообщений (чаще всего для ошибок)


      6. Реализация, тестирование и испытание……


В данной главе рассматривается процесс реализации, тестирования и испытания разных компонентов программного средства по … .


      33. Вспомогательное ПО
Предоставляется информация о выбранном ПО, которое будет использоваться при реализации Вашего проекта, информация о языке программирования.


      34. Особенности реализации ИЛИ Испытания реализованных методов/функций
В зависимости от типа работ изменяется название и содержание данного раздела (ПО СОГЛАСОВАНИЮ С ПРЕПОДАВАТЕЛЕМ).
В случае если сложность проекта высока и/или у команды нет достаточного уровня знаний и навыков для реализации какой-либо части проекта, то выбирается «Особенности реализации». Здесь Вам необходимо проанализировать и описать все аспекты, которые будут необходимы при реализации Вашего проекта (библиотеки, сервисы, построение связей (в том числе как их реализовать) и т.д.).
Для тех, кто планирует реализовать какой-либо функционал своего проекта данный раздел будет носить название «Испытания реализованных…». Здесь необходимо будет привести примеры работы реализованного Вами функционала (с разными данными, возможно показать разные итерации функционала) и, соответственно, сделать выводы относительно работы реализованного кода. Описывать более подробно структуру кода, библиотек или связей не требуется, только если это не несёт важную для Вас составляющую при формулировании вывода или при описании испытаний/экспериментов.  


      35. Тестирование
В зависимости от работ в разделе 6.2 описывается тестирование по чёрному или белому ящику. Примеры были представлены в рамках 2го семестра.


      36. Ограничения для первичного программного тестирования
В данном разделе описываются ограничения, которые могут вытекать из разделов 4.4 − 4.8. Чаще всего данные ограничения сводятся к каким-либо идеальным условиям. 
ПРИМЕЧАНИЕ: РАЗДЕЛЫ 6.2 − 6.4 МОГУТ МЕНЯТЬСЯ МЕСТАМИ НА ОСНОВЕ ПОВЕСТВОВАНИЯ.


      37. Презентация проекта
На рисунке N − рисунок N представлена презентация проекта. (презентация оформлена в официальном стиле на основе фирменного стиля ДВФУ о котором речь шла ранее (представлен на сайте ДВФУ).
      7. Заключение


Заключение содержит основные выводы по работе. Делается акцент на выполнении целей и задач работы, а также описываются основные аспекты, которые Вы можете представить как выводы по всей проделанной работе.
      8. Список источников